{"version":3,"sources":["Cardhelpers.js","Card.js","CardDrawer.js","App.js","serviceWorker.js","index.js"],"names":["randomNumber","min","max","length","limit","Error","number","uniqueNumbers","i","Math","floor","random","indexOf","Card","props","_translateX","_translateY","_rotation","_style","transform","play","duration","easeType","keyframes","this","className","style","src","alt","Component","CardDrawer","state","cards","drawnCards","drawAfreshCard","bind","axios","get","then","data","deck_id","e","setState","prevState","slice","map","key","image","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74406061.chunk.js","sourcesContent":["const randomNumber = (min, max, length = 1) => {\r\n    const limit = max - min + 1;\r\n    if (min > max || max < min) {\r\n      throw new Error(\r\n        `Parameter \"min\" has to be smaller than \"max\" and vice-versa.`\r\n      );\r\n    } else if (length > limit) {\r\n      throw new Error(\r\n        `The length between ${min} and ${max} cannot exceed ${limit}.`\r\n      );\r\n    }\r\n  \r\n    let uniqueNumbers = [];\r\n    let number;\r\n    for (var i = 0; i < length; i++) {\r\n      do number = Math.floor(Math.random() * limit) + min;\r\n      while (uniqueNumbers.indexOf(number) !== -1);\r\n  \r\n      uniqueNumbers[i] = number;\r\n    }\r\n  \r\n    return uniqueNumbers;\r\n  };\r\n  \r\n  export { randomNumber };\r\n  ","import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\nimport { randomNumber } from \"./Cardhelpers\";\r\nimport { AnimateKeyframes } from \"react-simple-animate\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this._translateX = `${randomNumber(-90, 40, 1)}px`;\r\n    this._translateY = `${randomNumber(-40, 40, 1)}px`;\r\n    this._rotation = `${randomNumber(-180, 180, 1)}deg`;\r\n    this._style = {\r\n      transform: `translate(${this._translateX},${this._translateY} ) rotate(${\r\n        this._rotation\r\n      })`\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AnimateKeyframes\r\n        play={true}\r\n        duration={0.6}\r\n        easeType=\"cubic-bezier(0.25, 0.46, 0.45, 0.94)\"\r\n        keyframes={[\r\n          `transform: translateZ(700px) translateY(300px)`,\r\n          `transform: translateZ(0) translateY(${this._translateY}px)`\r\n        ]}\r\n      >\r\n        <figure className=\"Card\" style={{ ...this._style }}>\r\n          <img src={this.props.src} alt={this.props.alt} />\r\n        </figure>\r\n      </AnimateKeyframes>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nimport axios from \"axios\";\r\nimport \"./CardDrawer.css\";\r\n\r\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\";\r\n\r\nexport default class CardDrawer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: [],\r\n      drawnCards: []\r\n    };\r\n    this.drawAfreshCard = this.drawAfreshCard.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await axios.get(API_URL).then(({ data }) => data);\r\n\r\n    const cards = await axios\r\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\r\n      .then(e => e.data.cards);\r\n\r\n    this.setState({ cards });\r\n  }\r\n\r\n  drawAfreshCard() {\r\n    return this.setState(prevState => ({\r\n      drawnCards: [\r\n        ...prevState.drawnCards,\r\n        prevState.cards[prevState.cards.length - 1]\r\n      ],\r\n      cards: [...prevState.cards.slice(0, -1)]\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const cards = this.state.drawnCards.map((e, i) => (\r\n      <Card key={i} src={e.image} />\r\n    ));\r\n    const buttonText = () => {\r\n      if (this.state.drawnCards.length > 51) return \"Finished!\";\r\n      if (this.state.cards.length <= 0) return \"Loading...\";\r\n      else if (this.state.cards.length > 0)\r\n        return `${this.state.cards.length} cards left!`;\r\n    };\r\n    return (\r\n      <div className=\"CardDraw\">\r\n        <h1 className=\"CardDraw-title\">Card Drawing</h1>\r\n        <h2 className=\"CardDraw-subtitle\">Draw the cards</h2>\r\n        <button\r\n          className=\"cardDraw-btn\"\r\n          onClick={this.drawAfreshCard}\r\n          disabled={this.state.cards.length <= 0}\r\n        >\r\n          {buttonText()}\r\n        </button>\r\n\r\n        <div className=\"CardToDraw-deck\">{cards}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport CardDrawer from \"./CardDrawer\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <CardDrawer />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}